package main

import (
	"context"
	"log"
	"net"
	"io"
	"io/ioutil"
	"os"
	"bytes"
	"net/url"
	"path"

	pb_ptypes "github.com/golang/protobuf/ptypes"
	pb_empty "github.com/golang/protobuf/ptypes/empty"
	bazel_pb "github.com/smukherj1/bazel_bes/proto"
	pb "google.golang.org/genproto/googleapis/devtools/build/v1"
	"google.golang.org/grpc"
	"github.com/pkg/errors"
)

const (
	port = "0.0.0.0:8080"
)

type server struct{}

func (s *server) PublishLifecycleEvent(ctx context.Context, req *pb.PublishLifecycleEventRequest) (*pb_empty.Empty, error) {
	log.Println("Got life cycle event for build", req.BuildEvent.StreamId.BuildId, req.BuildEvent)
	return &pb_empty.Empty{}, nil
}

func (s *server) processCompleted(sid *pb.StreamId, id *bazel_pb.BuildEventId_TargetCompletedId, c *bazel_pb.TargetComplete) error {
	log.Printf("Completed %v, success %v", id.GetLabel(), c.GetSuccess())
	return nil
}

type emptyReadCloser struct {}

func (e emptyReadCloser) Read([]byte) (int, error) {
	return 0, io.EOF
}

func (e emptyReadCloser) Close() error {
	return nil
}

func (s *server) processAction(sid *pb.StreamId, id *bazel_pb.BuildEventId_ActionCompletedId, a *bazel_pb.ActionExecuted) error {
	log.Printf("Completed action %v, exit code %d, command %q", id.GetLabel(), a.GetExitCode(), a.GetCommandLine())
	p, stdout, stderr := a.GetPrimaryOutput(), a.GetStdout(), a.GetStderr()
	pr, err := fileReader(p)
	if err != nil {
		pr = &emptyReadCloser{}
	}
	stdoutR, err := fileReader(stderr)
	if err != nil {
		stdoutR = &emptyReadCloser{}
	}
	stderrR, err := fileReader(stdout)
	if err != nil {
		stderrR = &emptyReadCloser{}
	}
	r := io.MultiReader(pr, stderrR, stdoutR)
	o, err := ioutil.ReadAll(r)
	if err == nil {
		log.Printf("Output for action %v: %v", id.GetLabel(), string(o))
	}
	return nil
}

func filename(f *bazel_pb.File) string {
	if f := f.GetUri(); f != "" {
		u, err := url.ParseRequestURI(f)
		if err != nil {
			return ""
		}
		return u.RequestURI()
	}
	return ""
}

func fileReader(f *bazel_pb.File) (io.ReadCloser, error) {
	if n := filename(f); n != "" {
		return os.Open(n)
	}
	if o := f.GetContents(); o != nil {
		return ioutil.NopCloser(bytes.NewReader(o)), nil
	}
	return &emptyReadCloser{}, nil
}

func (s *server) processTestResult(sid *pb.StreamId, id *bazel_pb.BuildEventId_TestResultId, r *bazel_pb.TestResult) error {
	log.Printf("Completed test %v, status %v, cached %v", id.GetLabel(), r.GetStatus().String(), r.GetCachedLocally())
	for _, f := range r.GetTestActionOutput() {
		if n := filename(f); path.Base(n) != "test.log" {
			continue
		}
		o, err := fileReader(f)
		if err != nil {
			return errors.Wrapf(err, "unable to get output for test result for label %v", id.GetLabel())
		}
		defer o.Close()
		blob, err := ioutil.ReadAll(o)
		if err != nil {
			return errors.Wrapf(err, "unable to load output generated by test %v", id.GetLabel())
		}
		log.Printf("Output for test %v from %v: %s", id.GetLabel(), f, string(blob))
	}
	return nil
}

func (s *server) processTestSummary(sid *pb.StreamId, id *bazel_pb.BuildEventId_TestSummaryId, ts *bazel_pb.TestSummary) error {
	log.Printf("Test summary %v, overall status %v", id.GetLabel(), ts.GetOverallStatus().String())
	return nil
}

func (s *server) processFinished(sid *pb.StreamId, f *bazel_pb.BuildFinished) error {
	log.Printf("Build (id %v, invocation %v) finished at %ds, status %d.", sid.BuildId, sid.InvocationId, f.FinishTimeMillis / 1000, f.ExitCode.GetCode())
	return nil
}

func (s *server) processAborted(sid *pb.StreamId, a *bazel_pb.Aborted) error {
	log.Printf("Build (id %v, invocation %v) aborted because %v.", sid.BuildId, sid.InvocationId, a.Reason)
	return nil
}

func (s *server) processBuildEvent(sid *pb.StreamId, be *bazel_pb.BuildEvent) error {
	if c := be.GetCompleted(); c != nil {
		return s.processCompleted(sid, be.GetId().GetTargetCompleted(), c)
	}
	if a := be.GetAction(); a != nil {
		return s.processAction(sid, be.GetId().GetActionCompleted(), a)
	}
	if r := be.GetTestResult(); r != nil {
		return s.processTestResult(sid, be.GetId().GetTestResult(), r)
	}
	if ts := be.GetTestSummary(); ts != nil {
		return s.processTestSummary(sid, be.GetId().GetTestSummary(), ts)
	}
	if f := be.GetFinished(); f != nil {
		return s.processFinished(sid, f)
	}
	if a := be.GetAborted(); a != nil {
		return s.processAborted(sid, a)
	}
	return nil
}

func (s *server) PublishBuildToolEventStream(stream pb.PublishBuildEvent_PublishBuildToolEventStreamServer) error {
	log.Println("Reading build tool event stream")
	for {
		req, _ := stream.Recv()
		if req == nil || req.OrderedBuildEvent == nil || req.OrderedBuildEvent.Event == nil {
			break
		}
		sid := req.OrderedBuildEvent.StreamId
		switch e := req.OrderedBuildEvent.Event.Event.(type) {
		case *pb.BuildEvent_InvocationAttemptStarted_:
			log.Println("Got InvocationAttemptStarted event, attempt", e.InvocationAttemptStarted.AttemptNumber)
		case *pb.BuildEvent_InvocationAttemptFinished_:
			log.Println("Got InvocationAttemptFinished event, result", e.InvocationAttemptFinished.GetInvocationStatus().GetResult().String())
		case *pb.BuildEvent_BazelEvent:
			be := &bazel_pb.BuildEvent{}
			if err := pb_ptypes.UnmarshalAny(e.BazelEvent, be); err != nil {
				log.Printf("ERROR: Unable to unmarshall Bazel BuildEvent from BazelEvent: %v", err)
				break
			}
			go func() {
				if err := s.processBuildEvent(sid, be); err != nil {
					log.Printf("ERROR: Unable to process Bazel BuildEvent: %v", err)
				}
			}()
		}
		resp := &pb.PublishBuildToolEventStreamResponse{StreamId: req.OrderedBuildEvent.StreamId, SequenceNumber: req.OrderedBuildEvent.SequenceNumber}
		stream.Send(resp)
	}
	return nil
}

func main() {
	lis, err := net.Listen("tcp", port)
	if err != nil {
		log.Fatalf("failed to listen: %v", err)
	}
	s := grpc.NewServer()
	pb.RegisterPublishBuildEventServer(s, &server{})
	log.Printf("Launching Bazel BES service on endpoint %s\n", lis.Addr())
	if err := s.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
